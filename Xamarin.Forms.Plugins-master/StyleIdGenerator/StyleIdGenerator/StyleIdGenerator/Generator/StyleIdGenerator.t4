<#@ template debug="false" hostspecific="true" language="C#"#>
<#@ assembly name="System.Core" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>

<#@ output extension=".cs" #>

<# 
var queryMatchingFiles = GetMatchingXamlFiles(startFolder);
#>
	public struct StyleIds
	{
		<#
		foreach(var fileMatch in queryMatchingFiles)
		{
		#>
			public struct <#= fileMatch.nameWithoutExtension #>
			{
				<# foreach(var styleId in fileMatch.matchedValues)
				{
				#>

				public static string <#=styleId.Replace(" ","")#> = "<#=styleId#>";
				<#
				}
				#>
			}
		<#
		}
		#>
	}

<#+

public class MatchingFile
{
    public string name { get; set; }
    public string nameWithoutExtension { get; set; }
    public IEnumerable<string> matchedValues { get; set; }
}

static IEnumerable<MatchingFile> GetMatchingXamlFiles(string startFolder)
{
	//String search code from here https://msdn.microsoft.com/en-us/library/bb882639.aspx
	IEnumerable<System.IO.FileInfo> fileList = GetXamlFiles(startFolder);

	// Create the regular expression to find all things "Visual".
	var searchTerm =
	new System.Text.RegularExpressions.Regex("StyleId *= *\"([^\"]*?)\"");
	var replaceTerm =
	new System.Text.RegularExpressions.Regex("StyleId *= *");

	// Search the contents of each .htm file.
	// Remove the where clause to find even more matchedValues!
	// This query produces a list of files where a match
	// was found, and a list of the matchedValues in that file.
	// Note: Explicit typing of "Match" in select clause.
	// This is required because MatchCollection is not a
	// generic IEnumerable collection.
	var queryMatchingFiles =
			from file in fileList
			where file.Extension == ".xaml"
			let fileText = System.IO.File.ReadAllText(file.FullName)
			let matches = searchTerm.Matches(fileText)
			where matches.Count > 0
			select new MatchingFile
			{
			name = file.FullName,
			nameWithoutExtension = file.Name.Replace(".xaml", ""),
			matchedValues = from System.Text.RegularExpressions.Match match in matches
			select replaceTerm.Replace(match.Value,"").Replace("\"","")
			};
	
	return queryMatchingFiles;
}

static IEnumerable<System.IO.FileInfo> GetXamlFiles(string path)
{
    if (!System.IO.Directory.Exists(path))
        throw new System.IO.DirectoryNotFoundException();
    var fileNames = new List<string>();
    var files = new List<System.IO.FileInfo>();

    foreach (var file in System.IO.Directory.GetFiles(path, "*.xaml", System.IO.SearchOption.AllDirectories)) {
        var directory = Path.GetDirectoryName (file);
    
        if (!directory.Contains ("Debug") && !directory.Contains ("Release")) {
            fileNames.Add (file);
        }
    }

    foreach (string name in fileNames)
    {
        files.Add(new System.IO.FileInfo(name));
    }
    return files;
}
#>